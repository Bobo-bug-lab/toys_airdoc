// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace test {
class ComplexMessage;
struct ComplexMessageDefaultTypeInternal;
extern ComplexMessageDefaultTypeInternal _ComplexMessage_default_instance_;
class ComplexMessage_SubMessage;
struct ComplexMessage_SubMessageDefaultTypeInternal;
extern ComplexMessage_SubMessageDefaultTypeInternal _ComplexMessage_SubMessage_default_instance_;
class EchoRequest;
struct EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class example;
struct exampleDefaultTypeInternal;
extern exampleDefaultTypeInternal _example_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::ComplexMessage* Arena::CreateMaybeMessage<::test::ComplexMessage>(Arena*);
template<> ::test::ComplexMessage_SubMessage* Arena::CreateMaybeMessage<::test::ComplexMessage_SubMessage>(Arena*);
template<> ::test::EchoRequest* Arena::CreateMaybeMessage<::test::EchoRequest>(Arena*);
template<> ::test::example* Arena::CreateMaybeMessage<::test::example>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

enum ComplexMessage_SubEnum : int {
  ComplexMessage_SubEnum_VALUE1 = 10,
  ComplexMessage_SubEnum_VALUE2 = 20
};
bool ComplexMessage_SubEnum_IsValid(int value);
constexpr ComplexMessage_SubEnum ComplexMessage_SubEnum_SubEnum_MIN = ComplexMessage_SubEnum_VALUE1;
constexpr ComplexMessage_SubEnum ComplexMessage_SubEnum_SubEnum_MAX = ComplexMessage_SubEnum_VALUE2;
constexpr int ComplexMessage_SubEnum_SubEnum_ARRAYSIZE = ComplexMessage_SubEnum_SubEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComplexMessage_SubEnum_descriptor();
template<typename T>
inline const std::string& ComplexMessage_SubEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComplexMessage_SubEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComplexMessage_SubEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComplexMessage_SubEnum_descriptor(), enum_t_value);
}
inline bool ComplexMessage_SubEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComplexMessage_SubEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComplexMessage_SubEnum>(
    ComplexMessage_SubEnum_descriptor(), name, value);
}
// ===================================================================

class EchoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {}
  ~EchoRequest() override;
  explicit constexpr EchoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // required string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:test.EchoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ComplexMessage_SubMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.ComplexMessage.SubMessage) */ {
 public:
  inline ComplexMessage_SubMessage() : ComplexMessage_SubMessage(nullptr) {}
  ~ComplexMessage_SubMessage() override;
  explicit constexpr ComplexMessage_SubMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexMessage_SubMessage(const ComplexMessage_SubMessage& from);
  ComplexMessage_SubMessage(ComplexMessage_SubMessage&& from) noexcept
    : ComplexMessage_SubMessage() {
    *this = ::std::move(from);
  }

  inline ComplexMessage_SubMessage& operator=(const ComplexMessage_SubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexMessage_SubMessage& operator=(ComplexMessage_SubMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexMessage_SubMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexMessage_SubMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexMessage_SubMessage*>(
               &_ComplexMessage_SubMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComplexMessage_SubMessage& a, ComplexMessage_SubMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexMessage_SubMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexMessage_SubMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexMessage_SubMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexMessage_SubMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexMessage_SubMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComplexMessage_SubMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexMessage_SubMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.ComplexMessage.SubMessage";
  }
  protected:
  explicit ComplexMessage_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // repeated .test.EchoRequest echo = 2;
  int echo_size() const;
  private:
  int _internal_echo_size() const;
  public:
  void clear_echo();
  ::test::EchoRequest* mutable_echo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::EchoRequest >*
      mutable_echo();
  private:
  const ::test::EchoRequest& _internal_echo(int index) const;
  ::test::EchoRequest* _internal_add_echo();
  public:
  const ::test::EchoRequest& echo(int index) const;
  ::test::EchoRequest* add_echo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::EchoRequest >&
      echo() const;

  // required string field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:test.ComplexMessage.SubMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::EchoRequest > echo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ComplexMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.ComplexMessage) */ {
 public:
  inline ComplexMessage() : ComplexMessage(nullptr) {}
  ~ComplexMessage() override;
  explicit constexpr ComplexMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexMessage(const ComplexMessage& from);
  ComplexMessage(ComplexMessage&& from) noexcept
    : ComplexMessage() {
    *this = ::std::move(from);
  }

  inline ComplexMessage& operator=(const ComplexMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexMessage& operator=(ComplexMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexMessage*>(
               &_ComplexMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ComplexMessage& a, ComplexMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComplexMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.ComplexMessage";
  }
  protected:
  explicit ComplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComplexMessage_SubMessage SubMessage;

  typedef ComplexMessage_SubEnum SubEnum;
  static constexpr SubEnum VALUE1 =
    ComplexMessage_SubEnum_VALUE1;
  static constexpr SubEnum VALUE2 =
    ComplexMessage_SubEnum_VALUE2;
  static inline bool SubEnum_IsValid(int value) {
    return ComplexMessage_SubEnum_IsValid(value);
  }
  static constexpr SubEnum SubEnum_MIN =
    ComplexMessage_SubEnum_SubEnum_MIN;
  static constexpr SubEnum SubEnum_MAX =
    ComplexMessage_SubEnum_SubEnum_MAX;
  static constexpr int SubEnum_ARRAYSIZE =
    ComplexMessage_SubEnum_SubEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubEnum_descriptor() {
    return ComplexMessage_SubEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& SubEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubEnum_Name.");
    return ComplexMessage_SubEnum_Name(enum_t_value);
  }
  static inline bool SubEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubEnum* value) {
    return ComplexMessage_SubEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIntFieldNumber = 3,
    kEnumFieldNumber = 11,
    kStrListFieldNumber = 12,
    kStrFieldNumber = 1,
    kBinFieldNumber = 4,
    kSubFieldNumber = 10,
    kFloatFieldNumber = 2,
    kBoolFieldNumber = 5,
  };
  // repeated sint64 _int = 3;
  int _int_size() const;
  private:
  int _internal__int_size() const;
  public:
  void clear__int();
  private:
  int64_t _internal__int(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal__int() const;
  void _internal_add__int(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable__int();
  public:
  int64_t _int(int index) const;
  void set__int(int index, int64_t value);
  void add__int(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _int() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable__int();

  // repeated .test.ComplexMessage.SubEnum _enum = 11;
  int _enum_size() const;
  private:
  int _internal__enum_size() const;
  public:
  void clear__enum();
  private:
  ::test::ComplexMessage_SubEnum _internal__enum(int index) const;
  void _internal_add__enum(::test::ComplexMessage_SubEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable__enum();
  public:
  ::test::ComplexMessage_SubEnum _enum(int index) const;
  void set__enum(int index, ::test::ComplexMessage_SubEnum value);
  void add__enum(::test::ComplexMessage_SubEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable__enum();

  // repeated string str_list = 12;
  int str_list_size() const;
  private:
  int _internal_str_list_size() const;
  public:
  void clear_str_list();
  const std::string& str_list(int index) const;
  std::string* mutable_str_list(int index);
  void set_str_list(int index, const std::string& value);
  void set_str_list(int index, std::string&& value);
  void set_str_list(int index, const char* value);
  void set_str_list(int index, const char* value, size_t size);
  std::string* add_str_list();
  void add_str_list(const std::string& value);
  void add_str_list(std::string&& value);
  void add_str_list(const char* value);
  void add_str_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_list();
  private:
  const std::string& _internal_str_list(int index) const;
  std::string* _internal_add_str_list();
  public:

  // required string _str = 1;
  bool has__str() const;
  private:
  bool _internal_has__str() const;
  public:
  void clear__str();
  const std::string& _str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__str(ArgT0&& arg0, ArgT... args);
  std::string* mutable__str();
  PROTOBUF_NODISCARD std::string* release__str();
  void set_allocated__str(std::string* _str);
  private:
  const std::string& _internal__str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__str(const std::string& value);
  std::string* _internal_mutable__str();
  public:

  // required bytes _bin = 4;
  bool has__bin() const;
  private:
  bool _internal_has__bin() const;
  public:
  void clear__bin();
  const std::string& _bin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__bin(ArgT0&& arg0, ArgT... args);
  std::string* mutable__bin();
  PROTOBUF_NODISCARD std::string* release__bin();
  void set_allocated__bin(std::string* _bin);
  private:
  const std::string& _internal__bin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__bin(const std::string& value);
  std::string* _internal_mutable__bin();
  public:

  // optional .test.ComplexMessage.SubMessage sub = 10;
  bool has_sub() const;
  private:
  bool _internal_has_sub() const;
  public:
  void clear_sub();
  const ::test::ComplexMessage_SubMessage& sub() const;
  PROTOBUF_NODISCARD ::test::ComplexMessage_SubMessage* release_sub();
  ::test::ComplexMessage_SubMessage* mutable_sub();
  void set_allocated_sub(::test::ComplexMessage_SubMessage* sub);
  private:
  const ::test::ComplexMessage_SubMessage& _internal_sub() const;
  ::test::ComplexMessage_SubMessage* _internal_mutable_sub();
  public:
  void unsafe_arena_set_allocated_sub(
      ::test::ComplexMessage_SubMessage* sub);
  ::test::ComplexMessage_SubMessage* unsafe_arena_release_sub();

  // optional float _float = 2;
  bool has__float() const;
  private:
  bool _internal_has__float() const;
  public:
  void clear__float();
  float _float() const;
  void set__float(float value);
  private:
  float _internal__float() const;
  void _internal_set__float(float value);
  public:

  // required bool _bool = 5;
  bool has__bool() const;
  private:
  bool _internal_has__bool() const;
  public:
  void clear__bool();
  bool _bool() const;
  void set__bool(bool value);
  private:
  bool _internal__bool() const;
  void _internal_set__bool(bool value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ComplexMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:test.ComplexMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > _int_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> _enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _bin_;
  ::test::ComplexMessage_SubMessage* sub_;
  float _float_;
  bool _bool_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class example final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.example) */ {
 public:
  inline example() : example(nullptr) {}
  ~example() override;
  explicit constexpr example(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  example(const example& from);
  example(example&& from) noexcept
    : example() {
    *this = ::std::move(from);
  }

  inline example& operator=(const example& from) {
    CopyFrom(from);
    return *this;
  }
  inline example& operator=(example&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const example& default_instance() {
    return *internal_default_instance();
  }
  static inline const example* internal_default_instance() {
    return reinterpret_cast<const example*>(
               &_example_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(example& a, example& b) {
    a.Swap(&b);
  }
  inline void Swap(example* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(example* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  example* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<example>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const example& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const example& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(example* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.example";
  }
  protected:
  explicit example(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kIdFieldNumber = 1,
    kOptFieldNumber = 3,
  };
  // required string str = 2;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 opt = 3;
  bool has_opt() const;
  private:
  bool _internal_has_opt() const;
  public:
  void clear_opt();
  int32_t opt() const;
  void set_opt(int32_t value);
  private:
  int32_t _internal_opt() const;
  void _internal_set_opt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.example)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  int32_t id_;
  int32_t opt_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

static const int kEBoolFieldNumber = 101;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::test::ComplexMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  e_bool;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoRequest

// required string text = 1;
inline bool EchoRequest::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EchoRequest::has_text() const {
  return _internal_has_text();
}
inline void EchoRequest::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EchoRequest::text() const {
  // @@protoc_insertion_point(field_get:test.EchoRequest.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoRequest::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.EchoRequest.text)
}
inline std::string* EchoRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:test.EchoRequest.text)
  return _s;
}
inline const std::string& EchoRequest::_internal_text() const {
  return text_.Get();
}
inline void EchoRequest::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EchoRequest::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EchoRequest::release_text() {
  // @@protoc_insertion_point(field_release:test.EchoRequest.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EchoRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.EchoRequest.text)
}

// -------------------------------------------------------------------

// ComplexMessage_SubMessage

// required string field = 1;
inline bool ComplexMessage_SubMessage::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComplexMessage_SubMessage::has_field() const {
  return _internal_has_field();
}
inline void ComplexMessage_SubMessage::clear_field() {
  field_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComplexMessage_SubMessage::field() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage.SubMessage.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexMessage_SubMessage::set_field(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.ComplexMessage.SubMessage.field)
}
inline std::string* ComplexMessage_SubMessage::mutable_field() {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.SubMessage.field)
  return _s;
}
inline const std::string& ComplexMessage_SubMessage::_internal_field() const {
  return field_.Get();
}
inline void ComplexMessage_SubMessage::_internal_set_field(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComplexMessage_SubMessage::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000001u;
  return field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComplexMessage_SubMessage::release_field() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage.SubMessage.field)
  if (!_internal_has_field()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = field_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComplexMessage_SubMessage::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage.SubMessage.field)
}

// repeated .test.EchoRequest echo = 2;
inline int ComplexMessage_SubMessage::_internal_echo_size() const {
  return echo_.size();
}
inline int ComplexMessage_SubMessage::echo_size() const {
  return _internal_echo_size();
}
inline void ComplexMessage_SubMessage::clear_echo() {
  echo_.Clear();
}
inline ::test::EchoRequest* ComplexMessage_SubMessage::mutable_echo(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.SubMessage.echo)
  return echo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::EchoRequest >*
ComplexMessage_SubMessage::mutable_echo() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage.SubMessage.echo)
  return &echo_;
}
inline const ::test::EchoRequest& ComplexMessage_SubMessage::_internal_echo(int index) const {
  return echo_.Get(index);
}
inline const ::test::EchoRequest& ComplexMessage_SubMessage::echo(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage.SubMessage.echo)
  return _internal_echo(index);
}
inline ::test::EchoRequest* ComplexMessage_SubMessage::_internal_add_echo() {
  return echo_.Add();
}
inline ::test::EchoRequest* ComplexMessage_SubMessage::add_echo() {
  ::test::EchoRequest* _add = _internal_add_echo();
  // @@protoc_insertion_point(field_add:test.ComplexMessage.SubMessage.echo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::EchoRequest >&
ComplexMessage_SubMessage::echo() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage.SubMessage.echo)
  return echo_;
}

// -------------------------------------------------------------------

// ComplexMessage

// required string _str = 1;
inline bool ComplexMessage::_internal_has__str() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComplexMessage::has__str() const {
  return _internal_has__str();
}
inline void ComplexMessage::clear__str() {
  _str_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComplexMessage::_str() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._str)
  return _internal__str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexMessage::set__str(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 _str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.ComplexMessage._str)
}
inline std::string* ComplexMessage::mutable__str() {
  std::string* _s = _internal_mutable__str();
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage._str)
  return _s;
}
inline const std::string& ComplexMessage::_internal__str() const {
  return _str_.Get();
}
inline void ComplexMessage::_internal_set__str(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  _str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComplexMessage::_internal_mutable__str() {
  _has_bits_[0] |= 0x00000001u;
  return _str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComplexMessage::release__str() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage._str)
  if (!_internal_has__str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = _str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    _str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComplexMessage::set_allocated__str(std::string* _str) {
  if (_str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  _str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    _str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage._str)
}

// optional float _float = 2;
inline bool ComplexMessage::_internal_has__float() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ComplexMessage::has__float() const {
  return _internal_has__float();
}
inline void ComplexMessage::clear__float() {
  _float_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ComplexMessage::_internal__float() const {
  return _float_;
}
inline float ComplexMessage::_float() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._float)
  return _internal__float();
}
inline void ComplexMessage::_internal_set__float(float value) {
  _has_bits_[0] |= 0x00000008u;
  _float_ = value;
}
inline void ComplexMessage::set__float(float value) {
  _internal_set__float(value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._float)
}

// repeated sint64 _int = 3;
inline int ComplexMessage::_internal__int_size() const {
  return _int_.size();
}
inline int ComplexMessage::_int_size() const {
  return _internal__int_size();
}
inline void ComplexMessage::clear__int() {
  _int_.Clear();
}
inline int64_t ComplexMessage::_internal__int(int index) const {
  return _int_.Get(index);
}
inline int64_t ComplexMessage::_int(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._int)
  return _internal__int(index);
}
inline void ComplexMessage::set__int(int index, int64_t value) {
  _int_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._int)
}
inline void ComplexMessage::_internal_add__int(int64_t value) {
  _int_.Add(value);
}
inline void ComplexMessage::add__int(int64_t value) {
  _internal_add__int(value);
  // @@protoc_insertion_point(field_add:test.ComplexMessage._int)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ComplexMessage::_internal__int() const {
  return _int_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ComplexMessage::_int() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage._int)
  return _internal__int();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ComplexMessage::_internal_mutable__int() {
  return &_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ComplexMessage::mutable__int() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage._int)
  return _internal_mutable__int();
}

// required bytes _bin = 4;
inline bool ComplexMessage::_internal_has__bin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComplexMessage::has__bin() const {
  return _internal_has__bin();
}
inline void ComplexMessage::clear__bin() {
  _bin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComplexMessage::_bin() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._bin)
  return _internal__bin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexMessage::set__bin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 _bin_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.ComplexMessage._bin)
}
inline std::string* ComplexMessage::mutable__bin() {
  std::string* _s = _internal_mutable__bin();
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage._bin)
  return _s;
}
inline const std::string& ComplexMessage::_internal__bin() const {
  return _bin_.Get();
}
inline void ComplexMessage::_internal_set__bin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  _bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComplexMessage::_internal_mutable__bin() {
  _has_bits_[0] |= 0x00000002u;
  return _bin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComplexMessage::release__bin() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage._bin)
  if (!_internal_has__bin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = _bin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_bin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    _bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComplexMessage::set_allocated__bin(std::string* _bin) {
  if (_bin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  _bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _bin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_bin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    _bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage._bin)
}

// required bool _bool = 5;
inline bool ComplexMessage::_internal_has__bool() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ComplexMessage::has__bool() const {
  return _internal_has__bool();
}
inline void ComplexMessage::clear__bool() {
  _bool_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ComplexMessage::_internal__bool() const {
  return _bool_;
}
inline bool ComplexMessage::_bool() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._bool)
  return _internal__bool();
}
inline void ComplexMessage::_internal_set__bool(bool value) {
  _has_bits_[0] |= 0x00000010u;
  _bool_ = value;
}
inline void ComplexMessage::set__bool(bool value) {
  _internal_set__bool(value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._bool)
}

// optional .test.ComplexMessage.SubMessage sub = 10;
inline bool ComplexMessage::_internal_has_sub() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sub_ != nullptr);
  return value;
}
inline bool ComplexMessage::has_sub() const {
  return _internal_has_sub();
}
inline void ComplexMessage::clear_sub() {
  if (sub_ != nullptr) sub_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::test::ComplexMessage_SubMessage& ComplexMessage::_internal_sub() const {
  const ::test::ComplexMessage_SubMessage* p = sub_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::ComplexMessage_SubMessage&>(
      ::test::_ComplexMessage_SubMessage_default_instance_);
}
inline const ::test::ComplexMessage_SubMessage& ComplexMessage::sub() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage.sub)
  return _internal_sub();
}
inline void ComplexMessage::unsafe_arena_set_allocated_sub(
    ::test::ComplexMessage_SubMessage* sub) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_);
  }
  sub_ = sub;
  if (sub) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.ComplexMessage.sub)
}
inline ::test::ComplexMessage_SubMessage* ComplexMessage::release_sub() {
  _has_bits_[0] &= ~0x00000004u;
  ::test::ComplexMessage_SubMessage* temp = sub_;
  sub_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test::ComplexMessage_SubMessage* ComplexMessage::unsafe_arena_release_sub() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage.sub)
  _has_bits_[0] &= ~0x00000004u;
  ::test::ComplexMessage_SubMessage* temp = sub_;
  sub_ = nullptr;
  return temp;
}
inline ::test::ComplexMessage_SubMessage* ComplexMessage::_internal_mutable_sub() {
  _has_bits_[0] |= 0x00000004u;
  if (sub_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::ComplexMessage_SubMessage>(GetArenaForAllocation());
    sub_ = p;
  }
  return sub_;
}
inline ::test::ComplexMessage_SubMessage* ComplexMessage::mutable_sub() {
  ::test::ComplexMessage_SubMessage* _msg = _internal_mutable_sub();
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.sub)
  return _msg;
}
inline void ComplexMessage::set_allocated_sub(::test::ComplexMessage_SubMessage* sub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sub_;
  }
  if (sub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::test::ComplexMessage_SubMessage>::GetOwningArena(sub);
    if (message_arena != submessage_arena) {
      sub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sub_ = sub;
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage.sub)
}

// repeated .test.ComplexMessage.SubEnum _enum = 11;
inline int ComplexMessage::_internal__enum_size() const {
  return _enum_.size();
}
inline int ComplexMessage::_enum_size() const {
  return _internal__enum_size();
}
inline void ComplexMessage::clear__enum() {
  _enum_.Clear();
}
inline ::test::ComplexMessage_SubEnum ComplexMessage::_internal__enum(int index) const {
  return static_cast< ::test::ComplexMessage_SubEnum >(_enum_.Get(index));
}
inline ::test::ComplexMessage_SubEnum ComplexMessage::_enum(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._enum)
  return _internal__enum(index);
}
inline void ComplexMessage::set__enum(int index, ::test::ComplexMessage_SubEnum value) {
  assert(::test::ComplexMessage_SubEnum_IsValid(value));
  _enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._enum)
}
inline void ComplexMessage::_internal_add__enum(::test::ComplexMessage_SubEnum value) {
  assert(::test::ComplexMessage_SubEnum_IsValid(value));
  _enum_.Add(value);
}
inline void ComplexMessage::add__enum(::test::ComplexMessage_SubEnum value) {
  _internal_add__enum(value);
  // @@protoc_insertion_point(field_add:test.ComplexMessage._enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ComplexMessage::_enum() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage._enum)
  return _enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ComplexMessage::_internal_mutable__enum() {
  return &_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ComplexMessage::mutable__enum() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage._enum)
  return _internal_mutable__enum();
}

// repeated string str_list = 12;
inline int ComplexMessage::_internal_str_list_size() const {
  return str_list_.size();
}
inline int ComplexMessage::str_list_size() const {
  return _internal_str_list_size();
}
inline void ComplexMessage::clear_str_list() {
  str_list_.Clear();
}
inline std::string* ComplexMessage::add_str_list() {
  std::string* _s = _internal_add_str_list();
  // @@protoc_insertion_point(field_add_mutable:test.ComplexMessage.str_list)
  return _s;
}
inline const std::string& ComplexMessage::_internal_str_list(int index) const {
  return str_list_.Get(index);
}
inline const std::string& ComplexMessage::str_list(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage.str_list)
  return _internal_str_list(index);
}
inline std::string* ComplexMessage::mutable_str_list(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.str_list)
  return str_list_.Mutable(index);
}
inline void ComplexMessage::set_str_list(int index, const std::string& value) {
  str_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage.str_list)
}
inline void ComplexMessage::set_str_list(int index, std::string&& value) {
  str_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.ComplexMessage.str_list)
}
inline void ComplexMessage::set_str_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.ComplexMessage.str_list)
}
inline void ComplexMessage::set_str_list(int index, const char* value, size_t size) {
  str_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.ComplexMessage.str_list)
}
inline std::string* ComplexMessage::_internal_add_str_list() {
  return str_list_.Add();
}
inline void ComplexMessage::add_str_list(const std::string& value) {
  str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.ComplexMessage.str_list)
}
inline void ComplexMessage::add_str_list(std::string&& value) {
  str_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.ComplexMessage.str_list)
}
inline void ComplexMessage::add_str_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.ComplexMessage.str_list)
}
inline void ComplexMessage::add_str_list(const char* value, size_t size) {
  str_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.ComplexMessage.str_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComplexMessage::str_list() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage.str_list)
  return str_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComplexMessage::mutable_str_list() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage.str_list)
  return &str_list_;
}

// -------------------------------------------------------------------

// example

// required int32 id = 1;
inline bool example::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool example::has_id() const {
  return _internal_has_id();
}
inline void example::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t example::_internal_id() const {
  return id_;
}
inline int32_t example::id() const {
  // @@protoc_insertion_point(field_get:test.example.id)
  return _internal_id();
}
inline void example::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void example::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:test.example.id)
}

// required string str = 2;
inline bool example::_internal_has_str() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool example::has_str() const {
  return _internal_has_str();
}
inline void example::clear_str() {
  str_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& example::str() const {
  // @@protoc_insertion_point(field_get:test.example.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void example::set_str(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.example.str)
}
inline std::string* example::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:test.example.str)
  return _s;
}
inline const std::string& example::_internal_str() const {
  return str_.Get();
}
inline void example::_internal_set_str(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* example::_internal_mutable_str() {
  _has_bits_[0] |= 0x00000001u;
  return str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* example::release_str() {
  // @@protoc_insertion_point(field_release:test.example.str)
  if (!_internal_has_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void example::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.example.str)
}

// optional int32 opt = 3;
inline bool example::_internal_has_opt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool example::has_opt() const {
  return _internal_has_opt();
}
inline void example::clear_opt() {
  opt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t example::_internal_opt() const {
  return opt_;
}
inline int32_t example::opt() const {
  // @@protoc_insertion_point(field_get:test.example.opt)
  return _internal_opt();
}
inline void example::_internal_set_opt(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  opt_ = value;
}
inline void example::set_opt(int32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:test.example.opt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test::ComplexMessage_SubEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::ComplexMessage_SubEnum>() {
  return ::test::ComplexMessage_SubEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
